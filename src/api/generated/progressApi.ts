/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Task Progress API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AIResult,
  AISuggestInput,
  AccessLevelInput,
  AccessScope,
  AccessScopeInput,
  AccessUser,
  Company,
  CompanyInput,
  DefaultErrorResponse,
  DeleteProgressCompaniesCompanyIdParams,
  ErrorResponse,
  GetProgressCompaniesCompanyIdParams,
  GetProgressTaskOrdersParams,
  JobId,
  Login,
  LoginResponse,
  Message,
  Objective,
  ObjectiveInput,
  ObjectiveResponse,
  ObjectiveUpdate,
  ObjectivesList,
  Order,
  OrgAccess,
  Organization,
  OrganizationInput,
  OrganizationTree,
  OrganizationUpdate,
  Progress,
  ProgressInput,
  Status,
  Task,
  TaskCreateResponse,
  TaskInput,
  TaskListResponse,
  TaskOrder,
  TaskOrderInput,
  TaskUpdate,
  UnprocessableEntityResponse,
  User,
  UserCreateResponse,
  UserInput,
  UserUpdate,
  WPLogin,
  YAMLResponse
} from './model';

import { default } from '../axiosInstance';
/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅÆ„Çπ„Ç≥„Éº„Éó‰∏ÄË¶ß
 */
export const getProgressAccessScopesUsersUserId = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return default<AccessScope[]>(
      {url: `/progress/access-scopes/users/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressAccessScopesUsersUserIdQueryKey = (userId: number,) => {
    return [`/progress/access-scopes/users/${userId}`] as const;
    }

    
export const getGetProgressAccessScopesUsersUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressAccessScopesUsersUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>> = ({ signal }) => getProgressAccessScopesUsersUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressAccessScopesUsersUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>>
export type GetProgressAccessScopesUsersUserIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressAccessScopesUsersUserId<TData = Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>,
          TError,
          Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAccessScopesUsersUserId<TData = Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>,
          TError,
          Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAccessScopesUsersUserId<TData = Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅÆ„Çπ„Ç≥„Éº„Éó‰∏ÄË¶ß
 */

export function useGetProgressAccessScopesUsersUserId<TData = Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAccessScopesUsersUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressAccessScopesUsersUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Çπ„Ç≥„Éº„ÉóËøΩÂä†
 */
export const postProgressAccessScopesUsersUserId = (
    userId: number,
    accessScopeInput: AccessScopeInput,
 signal?: AbortSignal
) => {
      
      
      return default<Message>(
      {url: `/progress/access-scopes/users/${userId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: accessScopeInput, signal
    },
      );
    }
  


export const getPostProgressAccessScopesUsersUserIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressAccessScopesUsersUserId>>, TError,{userId: number;data: AccessScopeInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressAccessScopesUsersUserId>>, TError,{userId: number;data: AccessScopeInput}, TContext> => {

const mutationKey = ['postProgressAccessScopesUsersUserId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressAccessScopesUsersUserId>>, {userId: number;data: AccessScopeInput}> = (props) => {
          const {userId,data} = props ?? {};

          return  postProgressAccessScopesUsersUserId(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressAccessScopesUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressAccessScopesUsersUserId>>>
    export type PostProgressAccessScopesUsersUserIdMutationBody = AccessScopeInput
    export type PostProgressAccessScopesUsersUserIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Çπ„Ç≥„Éº„ÉóËøΩÂä†
 */
export const usePostProgressAccessScopesUsersUserId = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressAccessScopesUsersUserId>>, TError,{userId: number;data: AccessScopeInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressAccessScopesUsersUserId>>,
        TError,
        {userId: number;data: AccessScopeInput},
        TContext
      > => {

      const mutationOptions = getPostProgressAccessScopesUsersUserIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Çπ„Ç≥„Éº„ÉóÂâäÈô§
 */
export const deleteProgressAccessScopesScopeId = (
    scopeId: number,
 ) => {
      
      
      return default<Message>(
      {url: `/progress/access-scopes/${scopeId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProgressAccessScopesScopeIdMutationOptions = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressAccessScopesScopeId>>, TError,{scopeId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProgressAccessScopesScopeId>>, TError,{scopeId: number}, TContext> => {

const mutationKey = ['deleteProgressAccessScopesScopeId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProgressAccessScopesScopeId>>, {scopeId: number}> = (props) => {
          const {scopeId} = props ?? {};

          return  deleteProgressAccessScopesScopeId(scopeId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProgressAccessScopesScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProgressAccessScopesScopeId>>>
    
    export type DeleteProgressAccessScopesScopeIdMutationError = ErrorResponse | DefaultErrorResponse

    /**
 * @summary „Çπ„Ç≥„Éº„ÉóÂâäÈô§
 */
export const useDeleteProgressAccessScopesScopeId = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressAccessScopesScopeId>>, TError,{scopeId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProgressAccessScopesScopeId>>,
        TError,
        {scopeId: number},
        TContext
      > => {

      const mutationOptions = getDeleteProgressAccessScopesScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary AIÊèêÊ°àÂÆüË°å
 */
export const postProgressAiSuggest = (
    aISuggestInput: AISuggestInput,
 signal?: AbortSignal
) => {
      
      
      return default<JobId>(
      {url: `/progress/ai/suggest`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: aISuggestInput, signal
    },
      );
    }
  


export const getPostProgressAiSuggestMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressAiSuggest>>, TError,{data: AISuggestInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressAiSuggest>>, TError,{data: AISuggestInput}, TContext> => {

const mutationKey = ['postProgressAiSuggest'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressAiSuggest>>, {data: AISuggestInput}> = (props) => {
          const {data} = props ?? {};

          return  postProgressAiSuggest(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressAiSuggestMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressAiSuggest>>>
    export type PostProgressAiSuggestMutationBody = AISuggestInput
    export type PostProgressAiSuggestMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary AIÊèêÊ°àÂÆüË°å
 */
export const usePostProgressAiSuggest = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressAiSuggest>>, TError,{data: AISuggestInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressAiSuggest>>,
        TError,
        {data: AISuggestInput},
        TContext
      > => {

      const mutationOptions = getPostProgressAiSuggestMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary AIÁµêÊûúÂèñÂæó
 */
export const getProgressAiResultJobId = (
    jobId: string,
 signal?: AbortSignal
) => {
      
      
      return default<AIResult>(
      {url: `/progress/ai/result/${jobId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressAiResultJobIdQueryKey = (jobId: string,) => {
    return [`/progress/ai/result/${jobId}`] as const;
    }

    
export const getGetProgressAiResultJobIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError = ErrorResponse | DefaultErrorResponse>(jobId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressAiResultJobIdQueryKey(jobId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressAiResultJobId>>> = ({ signal }) => getProgressAiResultJobId(jobId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(jobId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressAiResultJobIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressAiResultJobId>>>
export type GetProgressAiResultJobIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressAiResultJobId<TData = Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError = ErrorResponse | DefaultErrorResponse>(
 jobId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAiResultJobId>>,
          TError,
          Awaited<ReturnType<typeof getProgressAiResultJobId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAiResultJobId<TData = Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError = ErrorResponse | DefaultErrorResponse>(
 jobId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAiResultJobId>>,
          TError,
          Awaited<ReturnType<typeof getProgressAiResultJobId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAiResultJobId<TData = Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError = ErrorResponse | DefaultErrorResponse>(
 jobId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary AIÁµêÊûúÂèñÂæó
 */

export function useGetProgressAiResultJobId<TData = Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError = ErrorResponse | DefaultErrorResponse>(
 jobId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAiResultJobId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressAiResultJobIdQueryOptions(jobId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „É°„Éº„É´„Åß„É≠„Ç∞„Ç§„É≥
 */
export const postProgressSessions = (
    login: Login,
 signal?: AbortSignal
) => {
      
      
      return default<LoginResponse>(
      {url: `/progress/sessions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: login, signal
    },
      );
    }
  


export const getPostProgressSessionsMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressSessions>>, TError,{data: Login}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressSessions>>, TError,{data: Login}, TContext> => {

const mutationKey = ['postProgressSessions'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressSessions>>, {data: Login}> = (props) => {
          const {data} = props ?? {};

          return  postProgressSessions(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressSessionsMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressSessions>>>
    export type PostProgressSessionsMutationBody = Login
    export type PostProgressSessionsMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „É°„Éº„É´„Åß„É≠„Ç∞„Ç§„É≥
 */
export const usePostProgressSessions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressSessions>>, TError,{data: Login}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressSessions>>,
        TError,
        {data: Login},
        TContext
      > => {

      const mutationOptions = getPostProgressSessionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary WP ID„Åß„É≠„Ç∞„Ç§„É≥
 */
export const postProgressSessionsById = (
    wPLogin: WPLogin,
 signal?: AbortSignal
) => {
      
      
      return default<LoginResponse>(
      {url: `/progress/sessions/by-id`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: wPLogin, signal
    },
      );
    }
  


export const getPostProgressSessionsByIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressSessionsById>>, TError,{data: WPLogin}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressSessionsById>>, TError,{data: WPLogin}, TContext> => {

const mutationKey = ['postProgressSessionsById'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressSessionsById>>, {data: WPLogin}> = (props) => {
          const {data} = props ?? {};

          return  postProgressSessionsById(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressSessionsByIdMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressSessionsById>>>
    export type PostProgressSessionsByIdMutationBody = WPLogin
    export type PostProgressSessionsByIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary WP ID„Åß„É≠„Ç∞„Ç§„É≥
 */
export const usePostProgressSessionsById = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressSessionsById>>, TError,{data: WPLogin}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressSessionsById>>,
        TError,
        {data: WPLogin},
        TContext
      > => {

      const mutationOptions = getPostProgressSessionsByIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà
 */
export const deleteProgressSessionsCurrent = (
    
 ) => {
      
      
      return default<Message>(
      {url: `/progress/sessions/current`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProgressSessionsCurrentMutationOptions = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressSessionsCurrent>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProgressSessionsCurrent>>, TError,void, TContext> => {

const mutationKey = ['deleteProgressSessionsCurrent'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProgressSessionsCurrent>>, void> = () => {
          

          return  deleteProgressSessionsCurrent()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProgressSessionsCurrentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProgressSessionsCurrent>>>
    
    export type DeleteProgressSessionsCurrentMutationError = ErrorResponse | DefaultErrorResponse

    /**
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà
 */
export const useDeleteProgressSessionsCurrent = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressSessionsCurrent>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProgressSessionsCurrent>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteProgressSessionsCurrentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÂèñÂæó
 */
export const getProgressSessionsCurrent = (
    
 signal?: AbortSignal
) => {
      
      
      return default<User>(
      {url: `/progress/sessions/current`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressSessionsCurrentQueryKey = () => {
    return [`/progress/sessions/current`] as const;
    }

    
export const getGetProgressSessionsCurrentQueryOptions = <TData = Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError = ErrorResponse | DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressSessionsCurrentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressSessionsCurrent>>> = ({ signal }) => getProgressSessionsCurrent(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressSessionsCurrentQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressSessionsCurrent>>>
export type GetProgressSessionsCurrentQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressSessionsCurrent<TData = Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError = ErrorResponse | DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressSessionsCurrent>>,
          TError,
          Awaited<ReturnType<typeof getProgressSessionsCurrent>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressSessionsCurrent<TData = Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressSessionsCurrent>>,
          TError,
          Awaited<ReturnType<typeof getProgressSessionsCurrent>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressSessionsCurrent<TData = Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÂèñÂæó
 */

export function useGetProgressSessionsCurrent<TData = Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressSessionsCurrent>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressSessionsCurrentQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ‰ºöÁ§æ‰∏ÄË¶ßÂèñÂæó
 */
export const getProgressCompanies = (
    
 signal?: AbortSignal
) => {
      
      
      return default<Company[]>(
      {url: `/progress/companies`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressCompaniesQueryKey = () => {
    return [`/progress/companies`] as const;
    }

    
export const getGetProgressCompaniesQueryOptions = <TData = Awaited<ReturnType<typeof getProgressCompanies>>, TError = ErrorResponse | DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompanies>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressCompaniesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressCompanies>>> = ({ signal }) => getProgressCompanies(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressCompanies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressCompaniesQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressCompanies>>>
export type GetProgressCompaniesQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressCompanies<TData = Awaited<ReturnType<typeof getProgressCompanies>>, TError = ErrorResponse | DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompanies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressCompanies>>,
          TError,
          Awaited<ReturnType<typeof getProgressCompanies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressCompanies<TData = Awaited<ReturnType<typeof getProgressCompanies>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompanies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressCompanies>>,
          TError,
          Awaited<ReturnType<typeof getProgressCompanies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressCompanies<TData = Awaited<ReturnType<typeof getProgressCompanies>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompanies>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ‰ºöÁ§æ‰∏ÄË¶ßÂèñÂæó
 */

export function useGetProgressCompanies<TData = Awaited<ReturnType<typeof getProgressCompanies>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompanies>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressCompaniesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ‰ºöÁ§æ‰ΩúÊàê
 */
export const postProgressCompanies = (
    companyInput: CompanyInput,
 signal?: AbortSignal
) => {
      
      
      return default<Company>(
      {url: `/progress/companies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: companyInput, signal
    },
      );
    }
  


export const getPostProgressCompaniesMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressCompanies>>, TError,{data: CompanyInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressCompanies>>, TError,{data: CompanyInput}, TContext> => {

const mutationKey = ['postProgressCompanies'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressCompanies>>, {data: CompanyInput}> = (props) => {
          const {data} = props ?? {};

          return  postProgressCompanies(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressCompaniesMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressCompanies>>>
    export type PostProgressCompaniesMutationBody = CompanyInput
    export type PostProgressCompaniesMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary ‰ºöÁ§æ‰ΩúÊàê
 */
export const usePostProgressCompanies = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressCompanies>>, TError,{data: CompanyInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressCompanies>>,
        TError,
        {data: CompanyInput},
        TContext
      > => {

      const mutationOptions = getPostProgressCompaniesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ‰ºöÁ§æË©≥Á¥∞ÂèñÂæó
 */
export const getProgressCompaniesCompanyId = (
    companyId: number,
    params?: GetProgressCompaniesCompanyIdParams,
 signal?: AbortSignal
) => {
      
      
      return default<Company>(
      {url: `/progress/companies/${companyId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProgressCompaniesCompanyIdQueryKey = (companyId: number,
    params?: GetProgressCompaniesCompanyIdParams,) => {
    return [`/progress/companies/${companyId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProgressCompaniesCompanyIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(companyId: number,
    params?: GetProgressCompaniesCompanyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressCompaniesCompanyIdQueryKey(companyId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>> = ({ signal }) => getProgressCompaniesCompanyId(companyId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(companyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressCompaniesCompanyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>>
export type GetProgressCompaniesCompanyIdQueryError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse


export function useGetProgressCompaniesCompanyId<TData = Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(
 companyId: number,
    params: undefined |  GetProgressCompaniesCompanyIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>,
          TError,
          Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressCompaniesCompanyId<TData = Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(
 companyId: number,
    params?: GetProgressCompaniesCompanyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>,
          TError,
          Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressCompaniesCompanyId<TData = Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(
 companyId: number,
    params?: GetProgressCompaniesCompanyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ‰ºöÁ§æË©≥Á¥∞ÂèñÂæó
 */

export function useGetProgressCompaniesCompanyId<TData = Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(
 companyId: number,
    params?: GetProgressCompaniesCompanyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressCompaniesCompanyId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressCompaniesCompanyIdQueryOptions(companyId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ‰ºöÁ§æÊõ¥Êñ∞
 */
export const putProgressCompaniesCompanyId = (
    companyId: number,
    companyInput: CompanyInput,
 ) => {
      
      
      return default<Company>(
      {url: `/progress/companies/${companyId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: companyInput
    },
      );
    }
  


export const getPutProgressCompaniesCompanyIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressCompaniesCompanyId>>, TError,{companyId: number;data: CompanyInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProgressCompaniesCompanyId>>, TError,{companyId: number;data: CompanyInput}, TContext> => {

const mutationKey = ['putProgressCompaniesCompanyId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProgressCompaniesCompanyId>>, {companyId: number;data: CompanyInput}> = (props) => {
          const {companyId,data} = props ?? {};

          return  putProgressCompaniesCompanyId(companyId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProgressCompaniesCompanyIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProgressCompaniesCompanyId>>>
    export type PutProgressCompaniesCompanyIdMutationBody = CompanyInput
    export type PutProgressCompaniesCompanyIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary ‰ºöÁ§æÊõ¥Êñ∞
 */
export const usePutProgressCompaniesCompanyId = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressCompaniesCompanyId>>, TError,{companyId: number;data: CompanyInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProgressCompaniesCompanyId>>,
        TError,
        {companyId: number;data: CompanyInput},
        TContext
      > => {

      const mutationOptions = getPutProgressCompaniesCompanyIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ‰ºöÁ§æ„ÅÆÂâäÈô§(Ë´ñÁêÜ„ÉªÁâ©ÁêÜ)
 */
export const deleteProgressCompaniesCompanyId = (
    companyId: number,
    params?: DeleteProgressCompaniesCompanyIdParams,
 ) => {
      
      
      return default<Message>(
      {url: `/progress/companies/${companyId}`, method: 'DELETE',
        params
    },
      );
    }
  


export const getDeleteProgressCompaniesCompanyIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressCompaniesCompanyId>>, TError,{companyId: number;params?: DeleteProgressCompaniesCompanyIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProgressCompaniesCompanyId>>, TError,{companyId: number;params?: DeleteProgressCompaniesCompanyIdParams}, TContext> => {

const mutationKey = ['deleteProgressCompaniesCompanyId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProgressCompaniesCompanyId>>, {companyId: number;params?: DeleteProgressCompaniesCompanyIdParams}> = (props) => {
          const {companyId,params} = props ?? {};

          return  deleteProgressCompaniesCompanyId(companyId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProgressCompaniesCompanyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProgressCompaniesCompanyId>>>
    
    export type DeleteProgressCompaniesCompanyIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary ‰ºöÁ§æ„ÅÆÂâäÈô§(Ë´ñÁêÜ„ÉªÁâ©ÁêÜ)
 */
export const useDeleteProgressCompaniesCompanyId = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressCompaniesCompanyId>>, TError,{companyId: number;params?: DeleteProgressCompaniesCompanyIdParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProgressCompaniesCompanyId>>,
        TError,
        {companyId: number;params?: DeleteProgressCompaniesCompanyIdParams},
        TContext
      > => {

      const mutationOptions = getDeleteProgressCompaniesCompanyIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ‰ºöÁ§æÂæ©ÂÖÉ
 */
export const postProgressCompaniesCompanyIdRestore = (
    companyId: number,
 signal?: AbortSignal
) => {
      
      
      return default<Message>(
      {url: `/progress/companies/${companyId}/restore`, method: 'POST', signal
    },
      );
    }
  


export const getPostProgressCompaniesCompanyIdRestoreMutationOptions = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressCompaniesCompanyIdRestore>>, TError,{companyId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressCompaniesCompanyIdRestore>>, TError,{companyId: number}, TContext> => {

const mutationKey = ['postProgressCompaniesCompanyIdRestore'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressCompaniesCompanyIdRestore>>, {companyId: number}> = (props) => {
          const {companyId} = props ?? {};

          return  postProgressCompaniesCompanyIdRestore(companyId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressCompaniesCompanyIdRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressCompaniesCompanyIdRestore>>>
    
    export type PostProgressCompaniesCompanyIdRestoreMutationError = ErrorResponse | DefaultErrorResponse

    /**
 * @summary ‰ºöÁ§æÂæ©ÂÖÉ
 */
export const usePostProgressCompaniesCompanyIdRestore = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressCompaniesCompanyIdRestore>>, TError,{companyId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressCompaniesCompanyIdRestore>>,
        TError,
        {companyId: number},
        TContext
      > => {

      const mutationOptions = getPostProgressCompaniesCompanyIdRestoreMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„Éñ‰ΩúÊàê
 */
export const postProgressObjectives = (
    objectiveInput: ObjectiveInput,
 signal?: AbortSignal
) => {
      
      
      return default<ObjectiveResponse>(
      {url: `/progress/objectives`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: objectiveInput, signal
    },
      );
    }
  


export const getPostProgressObjectivesMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressObjectives>>, TError,{data: ObjectiveInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressObjectives>>, TError,{data: ObjectiveInput}, TContext> => {

const mutationKey = ['postProgressObjectives'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressObjectives>>, {data: ObjectiveInput}> = (props) => {
          const {data} = props ?? {};

          return  postProgressObjectives(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressObjectivesMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressObjectives>>>
    export type PostProgressObjectivesMutationBody = ObjectiveInput
    export type PostProgressObjectivesMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„Éñ‰ΩúÊàê
 */
export const usePostProgressObjectives = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressObjectives>>, TError,{data: ObjectiveInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressObjectives>>,
        TError,
        {data: ObjectiveInput},
        TContext
      > => {

      const mutationOptions = getPostProgressObjectivesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„ÉñË©≥Á¥∞ÂèñÂæó
 */
export const getProgressObjectivesObjectiveId = (
    objectiveId: number,
 signal?: AbortSignal
) => {
      
      
      return default<Objective>(
      {url: `/progress/objectives/${objectiveId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressObjectivesObjectiveIdQueryKey = (objectiveId: number,) => {
    return [`/progress/objectives/${objectiveId}`] as const;
    }

    
export const getGetProgressObjectivesObjectiveIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressObjectivesObjectiveIdQueryKey(objectiveId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>> = ({ signal }) => getProgressObjectivesObjectiveId(objectiveId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(objectiveId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressObjectivesObjectiveIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>>
export type GetProgressObjectivesObjectiveIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressObjectivesObjectiveId<TData = Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>,
          TError,
          Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressObjectivesObjectiveId<TData = Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>,
          TError,
          Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressObjectivesObjectiveId<TData = Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„ÉñË©≥Á¥∞ÂèñÂæó
 */

export function useGetProgressObjectivesObjectiveId<TData = Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesObjectiveId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressObjectivesObjectiveIdQueryOptions(objectiveId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„ÉñÊõ¥Êñ∞
 */
export const putProgressObjectivesObjectiveId = (
    objectiveId: number,
    objectiveUpdate: ObjectiveUpdate,
 ) => {
      
      
      return default<ObjectiveResponse>(
      {url: `/progress/objectives/${objectiveId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: objectiveUpdate
    },
      );
    }
  


export const getPutProgressObjectivesObjectiveIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressObjectivesObjectiveId>>, TError,{objectiveId: number;data: ObjectiveUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProgressObjectivesObjectiveId>>, TError,{objectiveId: number;data: ObjectiveUpdate}, TContext> => {

const mutationKey = ['putProgressObjectivesObjectiveId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProgressObjectivesObjectiveId>>, {objectiveId: number;data: ObjectiveUpdate}> = (props) => {
          const {objectiveId,data} = props ?? {};

          return  putProgressObjectivesObjectiveId(objectiveId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProgressObjectivesObjectiveIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProgressObjectivesObjectiveId>>>
    export type PutProgressObjectivesObjectiveIdMutationBody = ObjectiveUpdate
    export type PutProgressObjectivesObjectiveIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„ÉñÊõ¥Êñ∞
 */
export const usePutProgressObjectivesObjectiveId = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressObjectivesObjectiveId>>, TError,{objectiveId: number;data: ObjectiveUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProgressObjectivesObjectiveId>>,
        TError,
        {objectiveId: number;data: ObjectiveUpdate},
        TContext
      > => {

      const mutationOptions = getPutProgressObjectivesObjectiveIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„ÉñÂâäÈô§
 */
export const deleteProgressObjectivesObjectiveId = (
    objectiveId: number,
 ) => {
      
      
      return default<Message>(
      {url: `/progress/objectives/${objectiveId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProgressObjectivesObjectiveIdMutationOptions = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressObjectivesObjectiveId>>, TError,{objectiveId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProgressObjectivesObjectiveId>>, TError,{objectiveId: number}, TContext> => {

const mutationKey = ['deleteProgressObjectivesObjectiveId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProgressObjectivesObjectiveId>>, {objectiveId: number}> = (props) => {
          const {objectiveId} = props ?? {};

          return  deleteProgressObjectivesObjectiveId(objectiveId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProgressObjectivesObjectiveIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProgressObjectivesObjectiveId>>>
    
    export type DeleteProgressObjectivesObjectiveIdMutationError = ErrorResponse | DefaultErrorResponse

    /**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„ÉñÂâäÈô§
 */
export const useDeleteProgressObjectivesObjectiveId = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressObjectivesObjectiveId>>, TError,{objectiveId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProgressObjectivesObjectiveId>>,
        TError,
        {objectiveId: number},
        TContext
      > => {

      const mutationOptions = getDeleteProgressObjectivesObjectiveIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Çø„Çπ„ÇØ„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„Éñ‰∏ÄË¶ß
 */
export const getProgressObjectivesTasksTaskId = (
    taskId: number,
 signal?: AbortSignal
) => {
      
      
      return default<ObjectivesList>(
      {url: `/progress/objectives/tasks/${taskId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressObjectivesTasksTaskIdQueryKey = (taskId: number,) => {
    return [`/progress/objectives/tasks/${taskId}`] as const;
    }

    
export const getGetProgressObjectivesTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressObjectivesTasksTaskIdQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>> = ({ signal }) => getProgressObjectivesTasksTaskId(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressObjectivesTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>>
export type GetProgressObjectivesTasksTaskIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressObjectivesTasksTaskId<TData = Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>,
          TError,
          Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressObjectivesTasksTaskId<TData = Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>,
          TError,
          Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressObjectivesTasksTaskId<TData = Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çø„Çπ„ÇØ„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„Éñ‰∏ÄË¶ß
 */

export function useGetProgressObjectivesTasksTaskId<TData = Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressObjectivesTasksTaskId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressObjectivesTasksTaskIdQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÁµÑÁπî‰∏ÄË¶ßÂèñÂæó
 */
export const getProgressOrganizations = (
    
 signal?: AbortSignal
) => {
      
      
      return default<Organization[]>(
      {url: `/progress/organizations`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressOrganizationsQueryKey = () => {
    return [`/progress/organizations`] as const;
    }

    
export const getGetProgressOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getProgressOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressOrganizationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressOrganizations>>> = ({ signal }) => getProgressOrganizations(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressOrganizations>>>
export type GetProgressOrganizationsQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressOrganizations<TData = Awaited<ReturnType<typeof getProgressOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getProgressOrganizations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressOrganizations<TData = Awaited<ReturnType<typeof getProgressOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getProgressOrganizations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressOrganizations<TData = Awaited<ReturnType<typeof getProgressOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizations>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁµÑÁπî‰∏ÄË¶ßÂèñÂæó
 */

export function useGetProgressOrganizations<TData = Awaited<ReturnType<typeof getProgressOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizations>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressOrganizationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÁµÑÁπî‰ΩúÊàê
 */
export const postProgressOrganizations = (
    organizationInput: OrganizationInput,
 signal?: AbortSignal
) => {
      
      
      return default<Organization>(
      {url: `/progress/organizations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organizationInput, signal
    },
      );
    }
  


export const getPostProgressOrganizationsMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressOrganizations>>, TError,{data: OrganizationInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressOrganizations>>, TError,{data: OrganizationInput}, TContext> => {

const mutationKey = ['postProgressOrganizations'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressOrganizations>>, {data: OrganizationInput}> = (props) => {
          const {data} = props ?? {};

          return  postProgressOrganizations(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressOrganizationsMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressOrganizations>>>
    export type PostProgressOrganizationsMutationBody = OrganizationInput
    export type PostProgressOrganizationsMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary ÁµÑÁπî‰ΩúÊàê
 */
export const usePostProgressOrganizations = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressOrganizations>>, TError,{data: OrganizationInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressOrganizations>>,
        TError,
        {data: OrganizationInput},
        TContext
      > => {

      const mutationOptions = getPostProgressOrganizationsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÁµÑÁπîÂèñÂæó
 */
export const getProgressOrganizationsOrgId = (
    orgId: number,
 signal?: AbortSignal
) => {
      
      
      return default<Organization>(
      {url: `/progress/organizations/${orgId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressOrganizationsOrgIdQueryKey = (orgId: number,) => {
    return [`/progress/organizations/${orgId}`] as const;
    }

    
export const getGetProgressOrganizationsOrgIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(orgId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressOrganizationsOrgIdQueryKey(orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>> = ({ signal }) => getProgressOrganizationsOrgId(orgId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orgId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressOrganizationsOrgIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>>
export type GetProgressOrganizationsOrgIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressOrganizationsOrgId<TData = Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(
 orgId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>,
          TError,
          Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressOrganizationsOrgId<TData = Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(
 orgId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>,
          TError,
          Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressOrganizationsOrgId<TData = Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(
 orgId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁµÑÁπîÂèñÂæó
 */

export function useGetProgressOrganizationsOrgId<TData = Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(
 orgId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsOrgId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressOrganizationsOrgIdQueryOptions(orgId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÁµÑÁπîÊõ¥Êñ∞
 */
export const putProgressOrganizationsOrgId = (
    orgId: number,
    organizationUpdate: OrganizationUpdate,
 ) => {
      
      
      return default<Organization>(
      {url: `/progress/organizations/${orgId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: organizationUpdate
    },
      );
    }
  


export const getPutProgressOrganizationsOrgIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressOrganizationsOrgId>>, TError,{orgId: number;data: OrganizationUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProgressOrganizationsOrgId>>, TError,{orgId: number;data: OrganizationUpdate}, TContext> => {

const mutationKey = ['putProgressOrganizationsOrgId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProgressOrganizationsOrgId>>, {orgId: number;data: OrganizationUpdate}> = (props) => {
          const {orgId,data} = props ?? {};

          return  putProgressOrganizationsOrgId(orgId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProgressOrganizationsOrgIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProgressOrganizationsOrgId>>>
    export type PutProgressOrganizationsOrgIdMutationBody = OrganizationUpdate
    export type PutProgressOrganizationsOrgIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary ÁµÑÁπîÊõ¥Êñ∞
 */
export const usePutProgressOrganizationsOrgId = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressOrganizationsOrgId>>, TError,{orgId: number;data: OrganizationUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProgressOrganizationsOrgId>>,
        TError,
        {orgId: number;data: OrganizationUpdate},
        TContext
      > => {

      const mutationOptions = getPutProgressOrganizationsOrgIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÁµÑÁπîÂâäÈô§
 */
export const deleteProgressOrganizationsOrgId = (
    orgId: number,
 ) => {
      
      
      return default<Message>(
      {url: `/progress/organizations/${orgId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProgressOrganizationsOrgIdMutationOptions = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressOrganizationsOrgId>>, TError,{orgId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProgressOrganizationsOrgId>>, TError,{orgId: number}, TContext> => {

const mutationKey = ['deleteProgressOrganizationsOrgId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProgressOrganizationsOrgId>>, {orgId: number}> = (props) => {
          const {orgId} = props ?? {};

          return  deleteProgressOrganizationsOrgId(orgId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProgressOrganizationsOrgIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProgressOrganizationsOrgId>>>
    
    export type DeleteProgressOrganizationsOrgIdMutationError = ErrorResponse | DefaultErrorResponse

    /**
 * @summary ÁµÑÁπîÂâäÈô§
 */
export const useDeleteProgressOrganizationsOrgId = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressOrganizationsOrgId>>, TError,{orgId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProgressOrganizationsOrgId>>,
        TError,
        {orgId: number},
        TContext
      > => {

      const mutationOptions = getDeleteProgressOrganizationsOrgIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÁµÑÁπî„ÉÑ„É™„ÉºÂèñÂæó
 */
export const getProgressOrganizationsTree = (
    
 signal?: AbortSignal
) => {
      
      
      return default<OrganizationTree[]>(
      {url: `/progress/organizations/tree`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressOrganizationsTreeQueryKey = () => {
    return [`/progress/organizations/tree`] as const;
    }

    
export const getGetProgressOrganizationsTreeQueryOptions = <TData = Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError = ErrorResponse | DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressOrganizationsTreeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressOrganizationsTree>>> = ({ signal }) => getProgressOrganizationsTree(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressOrganizationsTreeQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressOrganizationsTree>>>
export type GetProgressOrganizationsTreeQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressOrganizationsTree<TData = Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError = ErrorResponse | DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressOrganizationsTree>>,
          TError,
          Awaited<ReturnType<typeof getProgressOrganizationsTree>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressOrganizationsTree<TData = Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressOrganizationsTree>>,
          TError,
          Awaited<ReturnType<typeof getProgressOrganizationsTree>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressOrganizationsTree<TData = Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁµÑÁπî„ÉÑ„É™„ÉºÂèñÂæó
 */

export function useGetProgressOrganizationsTree<TData = Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsTree>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressOrganizationsTreeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Â≠êÁµÑÁπîÂèñÂæó
 */
export const getProgressOrganizationsParentIdChildren = (
    parentId: number,
 signal?: AbortSignal
) => {
      
      
      return default<Organization[]>(
      {url: `/progress/organizations/${parentId}/children`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressOrganizationsParentIdChildrenQueryKey = (parentId: number,) => {
    return [`/progress/organizations/${parentId}/children`] as const;
    }

    
export const getGetProgressOrganizationsParentIdChildrenQueryOptions = <TData = Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError = ErrorResponse | DefaultErrorResponse>(parentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressOrganizationsParentIdChildrenQueryKey(parentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>> = ({ signal }) => getProgressOrganizationsParentIdChildren(parentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(parentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressOrganizationsParentIdChildrenQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>>
export type GetProgressOrganizationsParentIdChildrenQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressOrganizationsParentIdChildren<TData = Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError = ErrorResponse | DefaultErrorResponse>(
 parentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>,
          TError,
          Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressOrganizationsParentIdChildren<TData = Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError = ErrorResponse | DefaultErrorResponse>(
 parentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>,
          TError,
          Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressOrganizationsParentIdChildren<TData = Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError = ErrorResponse | DefaultErrorResponse>(
 parentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Â≠êÁµÑÁπîÂèñÂæó
 */

export function useGetProgressOrganizationsParentIdChildren<TData = Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError = ErrorResponse | DefaultErrorResponse>(
 parentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressOrganizationsParentIdChildren>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressOrganizationsParentIdChildrenQueryOptions(parentId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÈÄ≤Êçó‰∏ÄË¶ßÂèñÂæó
 */
export const getProgressUpdatesObjectiveId = (
    objectiveId: number,
 signal?: AbortSignal
) => {
      
      
      return default<Progress[]>(
      {url: `/progress/updates/${objectiveId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressUpdatesObjectiveIdQueryKey = (objectiveId: number,) => {
    return [`/progress/updates/${objectiveId}`] as const;
    }

    
export const getGetProgressUpdatesObjectiveIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressUpdatesObjectiveIdQueryKey(objectiveId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>> = ({ signal }) => getProgressUpdatesObjectiveId(objectiveId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(objectiveId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressUpdatesObjectiveIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>>
export type GetProgressUpdatesObjectiveIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressUpdatesObjectiveId<TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>,
          TError,
          Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUpdatesObjectiveId<TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>,
          TError,
          Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUpdatesObjectiveId<TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÈÄ≤Êçó‰∏ÄË¶ßÂèñÂæó
 */

export function useGetProgressUpdatesObjectiveId<TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressUpdatesObjectiveIdQueryOptions(objectiveId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÈÄ≤ÊçóËøΩÂä†
 */
export const postProgressUpdatesObjectiveId = (
    objectiveId: number,
    progressInput: ProgressInput,
 signal?: AbortSignal
) => {
      
      
      return default<Message>(
      {url: `/progress/updates/${objectiveId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: progressInput, signal
    },
      );
    }
  


export const getPostProgressUpdatesObjectiveIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressUpdatesObjectiveId>>, TError,{objectiveId: number;data: ProgressInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressUpdatesObjectiveId>>, TError,{objectiveId: number;data: ProgressInput}, TContext> => {

const mutationKey = ['postProgressUpdatesObjectiveId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressUpdatesObjectiveId>>, {objectiveId: number;data: ProgressInput}> = (props) => {
          const {objectiveId,data} = props ?? {};

          return  postProgressUpdatesObjectiveId(objectiveId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressUpdatesObjectiveIdMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressUpdatesObjectiveId>>>
    export type PostProgressUpdatesObjectiveIdMutationBody = ProgressInput
    export type PostProgressUpdatesObjectiveIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary ÈÄ≤ÊçóËøΩÂä†
 */
export const usePostProgressUpdatesObjectiveId = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressUpdatesObjectiveId>>, TError,{objectiveId: number;data: ProgressInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressUpdatesObjectiveId>>,
        TError,
        {objectiveId: number;data: ProgressInput},
        TContext
      > => {

      const mutationOptions = getPostProgressUpdatesObjectiveIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÊúÄÊñ∞ÈÄ≤ÊçóÂèñÂæó
 */
export const getProgressUpdatesObjectiveIdLatestProgress = (
    objectiveId: number,
 signal?: AbortSignal
) => {
      
      
      return default<Progress>(
      {url: `/progress/updates/${objectiveId}/latest-progress`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressUpdatesObjectiveIdLatestProgressQueryKey = (objectiveId: number,) => {
    return [`/progress/updates/${objectiveId}/latest-progress`] as const;
    }

    
export const getGetProgressUpdatesObjectiveIdLatestProgressQueryOptions = <TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError = ErrorResponse | DefaultErrorResponse>(objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressUpdatesObjectiveIdLatestProgressQueryKey(objectiveId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>> = ({ signal }) => getProgressUpdatesObjectiveIdLatestProgress(objectiveId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(objectiveId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressUpdatesObjectiveIdLatestProgressQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>>
export type GetProgressUpdatesObjectiveIdLatestProgressQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressUpdatesObjectiveIdLatestProgress<TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>,
          TError,
          Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUpdatesObjectiveIdLatestProgress<TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>,
          TError,
          Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUpdatesObjectiveIdLatestProgress<TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÊúÄÊñ∞ÈÄ≤ÊçóÂèñÂæó
 */

export function useGetProgressUpdatesObjectiveIdLatestProgress<TData = Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError = ErrorResponse | DefaultErrorResponse>(
 objectiveId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUpdatesObjectiveIdLatestProgress>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressUpdatesObjectiveIdLatestProgressQueryOptions(objectiveId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÈÄ≤ÊçóÂâäÈô§
 */
export const deleteProgressUpdatesProgressId = (
    progressId: number,
 ) => {
      
      
      return default<Message>(
      {url: `/progress/updates/${progressId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProgressUpdatesProgressIdMutationOptions = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressUpdatesProgressId>>, TError,{progressId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProgressUpdatesProgressId>>, TError,{progressId: number}, TContext> => {

const mutationKey = ['deleteProgressUpdatesProgressId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProgressUpdatesProgressId>>, {progressId: number}> = (props) => {
          const {progressId} = props ?? {};

          return  deleteProgressUpdatesProgressId(progressId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProgressUpdatesProgressIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProgressUpdatesProgressId>>>
    
    export type DeleteProgressUpdatesProgressIdMutationError = ErrorResponse | DefaultErrorResponse

    /**
 * @summary ÈÄ≤ÊçóÂâäÈô§
 */
export const useDeleteProgressUpdatesProgressId = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressUpdatesProgressId>>, TError,{progressId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProgressUpdatesProgressId>>,
        TError,
        {progressId: number},
        TContext
      > => {

      const mutationOptions = getDeleteProgressUpdatesProgressIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Ç¢„ÇØ„Çª„Çπ„É¨„Éô„É´Êõ¥Êñ∞
 */
export const putProgressTasksTaskIdAccessLevels = (
    taskId: number,
    accessLevelInput: AccessLevelInput,
 ) => {
      
      
      return default<Message>(
      {url: `/progress/tasks/${taskId}/access_levels`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: accessLevelInput
    },
      );
    }
  


export const getPutProgressTasksTaskIdAccessLevelsMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressTasksTaskIdAccessLevels>>, TError,{taskId: number;data: AccessLevelInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProgressTasksTaskIdAccessLevels>>, TError,{taskId: number;data: AccessLevelInput}, TContext> => {

const mutationKey = ['putProgressTasksTaskIdAccessLevels'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProgressTasksTaskIdAccessLevels>>, {taskId: number;data: AccessLevelInput}> = (props) => {
          const {taskId,data} = props ?? {};

          return  putProgressTasksTaskIdAccessLevels(taskId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProgressTasksTaskIdAccessLevelsMutationResult = NonNullable<Awaited<ReturnType<typeof putProgressTasksTaskIdAccessLevels>>>
    export type PutProgressTasksTaskIdAccessLevelsMutationBody = AccessLevelInput
    export type PutProgressTasksTaskIdAccessLevelsMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Ç¢„ÇØ„Çª„Çπ„É¨„Éô„É´Êõ¥Êñ∞
 */
export const usePutProgressTasksTaskIdAccessLevels = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressTasksTaskIdAccessLevels>>, TError,{taskId: number;data: AccessLevelInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProgressTasksTaskIdAccessLevels>>,
        TError,
        {taskId: number;data: AccessLevelInput},
        TContext
      > => {

      const mutationOptions = getPutProgressTasksTaskIdAccessLevelsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Çø„Çπ„ÇØ„É¶„Éº„Ç∂„ÉºÂèñÂæó
 */
export const getProgressTasksTaskIdAuthorizedUsers = (
    taskId: number,
 signal?: AbortSignal
) => {
      
      
      return default<AccessUser[]>(
      {url: `/progress/tasks/${taskId}/authorized_users`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressTasksTaskIdAuthorizedUsersQueryKey = (taskId: number,) => {
    return [`/progress/tasks/${taskId}/authorized_users`] as const;
    }

    
export const getGetProgressTasksTaskIdAuthorizedUsersQueryOptions = <TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError = ErrorResponse | DefaultErrorResponse>(taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressTasksTaskIdAuthorizedUsersQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>> = ({ signal }) => getProgressTasksTaskIdAuthorizedUsers(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressTasksTaskIdAuthorizedUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>>
export type GetProgressTasksTaskIdAuthorizedUsersQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressTasksTaskIdAuthorizedUsers<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksTaskIdAuthorizedUsers<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksTaskIdAuthorizedUsers<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çø„Çπ„ÇØ„É¶„Éº„Ç∂„ÉºÂèñÂæó
 */

export function useGetProgressTasksTaskIdAuthorizedUsers<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAuthorizedUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressTasksTaskIdAuthorizedUsersQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „É¶„Éº„Ç∂„Éº„Ç¢„ÇØ„Çª„Çπ‰∏ÄË¶ß
 */
export const getProgressTasksTaskIdAccessUsers = (
    taskId: number,
 signal?: AbortSignal
) => {
      
      
      return default<AccessUser[]>(
      {url: `/progress/tasks/${taskId}/access_users`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressTasksTaskIdAccessUsersQueryKey = (taskId: number,) => {
    return [`/progress/tasks/${taskId}/access_users`] as const;
    }

    
export const getGetProgressTasksTaskIdAccessUsersQueryOptions = <TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError = ErrorResponse | DefaultErrorResponse>(taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressTasksTaskIdAccessUsersQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>> = ({ signal }) => getProgressTasksTaskIdAccessUsers(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressTasksTaskIdAccessUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>>
export type GetProgressTasksTaskIdAccessUsersQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressTasksTaskIdAccessUsers<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksTaskIdAccessUsers<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksTaskIdAccessUsers<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „É¶„Éº„Ç∂„Éº„Ç¢„ÇØ„Çª„Çπ‰∏ÄË¶ß
 */

export function useGetProgressTasksTaskIdAccessUsers<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressTasksTaskIdAccessUsersQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÁµÑÁπî„Ç¢„ÇØ„Çª„Çπ‰∏ÄË¶ß
 */
export const getProgressTasksTaskIdAccessOrganizations = (
    taskId: number,
 signal?: AbortSignal
) => {
      
      
      return default<OrgAccess[]>(
      {url: `/progress/tasks/${taskId}/access_organizations`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressTasksTaskIdAccessOrganizationsQueryKey = (taskId: number,) => {
    return [`/progress/tasks/${taskId}/access_organizations`] as const;
    }

    
export const getGetProgressTasksTaskIdAccessOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressTasksTaskIdAccessOrganizationsQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>> = ({ signal }) => getProgressTasksTaskIdAccessOrganizations(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressTasksTaskIdAccessOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>>
export type GetProgressTasksTaskIdAccessOrganizationsQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressTasksTaskIdAccessOrganizations<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksTaskIdAccessOrganizations<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksTaskIdAccessOrganizations<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁµÑÁπî„Ç¢„ÇØ„Çª„Çπ‰∏ÄË¶ß
 */

export function useGetProgressTasksTaskIdAccessOrganizations<TData = Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskIdAccessOrganizations>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressTasksTaskIdAccessOrganizationsQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Çø„Çπ„ÇØ‰∏ÄË¶ß
 */
export const getProgressTasks = (
    
 signal?: AbortSignal
) => {
      
      
      return default<TaskListResponse>(
      {url: `/progress/tasks`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressTasksQueryKey = () => {
    return [`/progress/tasks`] as const;
    }

    
export const getGetProgressTasksQueryOptions = <TData = Awaited<ReturnType<typeof getProgressTasks>>, TError = ErrorResponse | DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressTasksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressTasks>>> = ({ signal }) => getProgressTasks(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressTasks>>>
export type GetProgressTasksQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressTasks<TData = Awaited<ReturnType<typeof getProgressTasks>>, TError = ErrorResponse | DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasks>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasks>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasks<TData = Awaited<ReturnType<typeof getProgressTasks>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasks>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasks>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasks<TData = Awaited<ReturnType<typeof getProgressTasks>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasks>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çø„Çπ„ÇØ‰∏ÄË¶ß
 */

export function useGetProgressTasks<TData = Awaited<ReturnType<typeof getProgressTasks>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasks>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressTasksQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Çø„Çπ„ÇØ‰ΩúÊàê
 */
export const postProgressTasks = (
    taskInput: TaskInput,
 signal?: AbortSignal
) => {
      
      
      return default<TaskCreateResponse>(
      {url: `/progress/tasks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: taskInput, signal
    },
      );
    }
  


export const getPostProgressTasksMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressTasks>>, TError,{data: TaskInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressTasks>>, TError,{data: TaskInput}, TContext> => {

const mutationKey = ['postProgressTasks'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressTasks>>, {data: TaskInput}> = (props) => {
          const {data} = props ?? {};

          return  postProgressTasks(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressTasksMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressTasks>>>
    export type PostProgressTasksMutationBody = TaskInput
    export type PostProgressTasksMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Çø„Çπ„ÇØ‰ΩúÊàê
 */
export const usePostProgressTasks = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressTasks>>, TError,{data: TaskInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressTasks>>,
        TError,
        {data: TaskInput},
        TContext
      > => {

      const mutationOptions = getPostProgressTasksMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Çø„Çπ„ÇØÂèñÂæó
 */
export const getProgressTasksTaskId = (
    taskId: number,
 signal?: AbortSignal
) => {
      
      
      return default<Task>(
      {url: `/progress/tasks/${taskId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressTasksTaskIdQueryKey = (taskId: number,) => {
    return [`/progress/tasks/${taskId}`] as const;
    }

    
export const getGetProgressTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressTasksTaskIdQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressTasksTaskId>>> = ({ signal }) => getProgressTasksTaskId(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressTasksTaskId>>>
export type GetProgressTasksTaskIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressTasksTaskId<TData = Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksTaskId>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksTaskId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksTaskId<TData = Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksTaskId>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksTaskId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksTaskId<TData = Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çø„Çπ„ÇØÂèñÂæó
 */

export function useGetProgressTasksTaskId<TData = Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError = ErrorResponse | DefaultErrorResponse>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksTaskId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressTasksTaskIdQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Çø„Çπ„ÇØÊõ¥Êñ∞
 */
export const putProgressTasksTaskId = (
    taskId: number,
    taskUpdate: TaskUpdate,
 ) => {
      
      
      return default<TaskCreateResponse>(
      {url: `/progress/tasks/${taskId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: taskUpdate
    },
      );
    }
  


export const getPutProgressTasksTaskIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressTasksTaskId>>, TError,{taskId: number;data: TaskUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProgressTasksTaskId>>, TError,{taskId: number;data: TaskUpdate}, TContext> => {

const mutationKey = ['putProgressTasksTaskId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProgressTasksTaskId>>, {taskId: number;data: TaskUpdate}> = (props) => {
          const {taskId,data} = props ?? {};

          return  putProgressTasksTaskId(taskId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProgressTasksTaskIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProgressTasksTaskId>>>
    export type PutProgressTasksTaskIdMutationBody = TaskUpdate
    export type PutProgressTasksTaskIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Çø„Çπ„ÇØÊõ¥Êñ∞
 */
export const usePutProgressTasksTaskId = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressTasksTaskId>>, TError,{taskId: number;data: TaskUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProgressTasksTaskId>>,
        TError,
        {taskId: number;data: TaskUpdate},
        TContext
      > => {

      const mutationOptions = getPutProgressTasksTaskIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Çø„Çπ„ÇØÂâäÈô§
 */
export const deleteProgressTasksTaskId = (
    taskId: number,
 ) => {
      
      
      return default<Message>(
      {url: `/progress/tasks/${taskId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProgressTasksTaskIdMutationOptions = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressTasksTaskId>>, TError,{taskId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProgressTasksTaskId>>, TError,{taskId: number}, TContext> => {

const mutationKey = ['deleteProgressTasksTaskId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProgressTasksTaskId>>, {taskId: number}> = (props) => {
          const {taskId} = props ?? {};

          return  deleteProgressTasksTaskId(taskId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProgressTasksTaskIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProgressTasksTaskId>>>
    
    export type DeleteProgressTasksTaskIdMutationError = ErrorResponse | DefaultErrorResponse

    /**
 * @summary „Çø„Çπ„ÇØÂâäÈô§
 */
export const useDeleteProgressTasksTaskId = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressTasksTaskId>>, TError,{taskId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProgressTasksTaskId>>,
        TError,
        {taskId: number},
        TContext
      > => {

      const mutationOptions = getDeleteProgressTasksTaskIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„ÉñÈ†ÜÂ∫èÊõ¥Êñ∞
 */
export const postProgressTasksTaskIdObjectivesOrder = (
    taskId: number,
    order: Order,
 signal?: AbortSignal
) => {
      
      
      return default<Message>(
      {url: `/progress/tasks/${taskId}/objectives/order`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: order, signal
    },
      );
    }
  


export const getPostProgressTasksTaskIdObjectivesOrderMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressTasksTaskIdObjectivesOrder>>, TError,{taskId: number;data: Order}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressTasksTaskIdObjectivesOrder>>, TError,{taskId: number;data: Order}, TContext> => {

const mutationKey = ['postProgressTasksTaskIdObjectivesOrder'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressTasksTaskIdObjectivesOrder>>, {taskId: number;data: Order}> = (props) => {
          const {taskId,data} = props ?? {};

          return  postProgressTasksTaskIdObjectivesOrder(taskId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressTasksTaskIdObjectivesOrderMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressTasksTaskIdObjectivesOrder>>>
    export type PostProgressTasksTaskIdObjectivesOrderMutationBody = Order
    export type PostProgressTasksTaskIdObjectivesOrderMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉÜ„Ç£„ÉñÈ†ÜÂ∫èÊõ¥Êñ∞
 */
export const usePostProgressTasksTaskIdObjectivesOrder = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressTasksTaskIdObjectivesOrder>>, TError,{taskId: number;data: Order}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressTasksTaskIdObjectivesOrder>>,
        TError,
        {taskId: number;data: Order},
        TContext
      > => {

      const mutationOptions = getPostProgressTasksTaskIdObjectivesOrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Çπ„ÉÜ„Éº„Çø„Çπ‰∏ÄË¶ß
 */
export const getProgressTasksStatuses = (
    
 signal?: AbortSignal
) => {
      
      
      return default<Status[]>(
      {url: `/progress/tasks/statuses`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressTasksStatusesQueryKey = () => {
    return [`/progress/tasks/statuses`] as const;
    }

    
export const getGetProgressTasksStatusesQueryOptions = <TData = Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError = ErrorResponse | DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressTasksStatusesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressTasksStatuses>>> = ({ signal }) => getProgressTasksStatuses(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressTasksStatusesQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressTasksStatuses>>>
export type GetProgressTasksStatusesQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressTasksStatuses<TData = Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError = ErrorResponse | DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksStatuses>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksStatuses>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksStatuses<TData = Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTasksStatuses>>,
          TError,
          Awaited<ReturnType<typeof getProgressTasksStatuses>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTasksStatuses<TData = Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çπ„ÉÜ„Éº„Çø„Çπ‰∏ÄË¶ß
 */

export function useGetProgressTasksStatuses<TData = Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTasksStatuses>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressTasksStatusesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Çø„Çπ„ÇØ„ÇíExcel„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
 */
export const getProgressExportsExcel = (
    
 signal?: AbortSignal
) => {
      
      
      return default<DefaultErrorResponse>(
      {url: `/progress/exports/excel`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressExportsExcelQueryKey = () => {
    return [`/progress/exports/excel`] as const;
    }

    
export const getGetProgressExportsExcelQueryOptions = <TData = Awaited<ReturnType<typeof getProgressExportsExcel>>, TError = DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsExcel>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressExportsExcelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressExportsExcel>>> = ({ signal }) => getProgressExportsExcel(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsExcel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressExportsExcelQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressExportsExcel>>>
export type GetProgressExportsExcelQueryError = DefaultErrorResponse


export function useGetProgressExportsExcel<TData = Awaited<ReturnType<typeof getProgressExportsExcel>>, TError = DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsExcel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressExportsExcel>>,
          TError,
          Awaited<ReturnType<typeof getProgressExportsExcel>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressExportsExcel<TData = Awaited<ReturnType<typeof getProgressExportsExcel>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsExcel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressExportsExcel>>,
          TError,
          Awaited<ReturnType<typeof getProgressExportsExcel>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressExportsExcel<TData = Awaited<ReturnType<typeof getProgressExportsExcel>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsExcel>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çø„Çπ„ÇØ„ÇíExcel„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
 */

export function useGetProgressExportsExcel<TData = Awaited<ReturnType<typeof getProgressExportsExcel>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsExcel>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressExportsExcelQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Çø„Çπ„ÇØ„ÇíYAML„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
 */
export const getProgressExportsYaml = (
    
 signal?: AbortSignal
) => {
      
      
      return default<YAMLResponse>(
      {url: `/progress/exports/yaml`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressExportsYamlQueryKey = () => {
    return [`/progress/exports/yaml`] as const;
    }

    
export const getGetProgressExportsYamlQueryOptions = <TData = Awaited<ReturnType<typeof getProgressExportsYaml>>, TError = ErrorResponse | DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsYaml>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressExportsYamlQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressExportsYaml>>> = ({ signal }) => getProgressExportsYaml(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsYaml>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressExportsYamlQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressExportsYaml>>>
export type GetProgressExportsYamlQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressExportsYaml<TData = Awaited<ReturnType<typeof getProgressExportsYaml>>, TError = ErrorResponse | DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsYaml>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressExportsYaml>>,
          TError,
          Awaited<ReturnType<typeof getProgressExportsYaml>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressExportsYaml<TData = Awaited<ReturnType<typeof getProgressExportsYaml>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsYaml>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressExportsYaml>>,
          TError,
          Awaited<ReturnType<typeof getProgressExportsYaml>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressExportsYaml<TData = Awaited<ReturnType<typeof getProgressExportsYaml>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsYaml>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çø„Çπ„ÇØ„ÇíYAML„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
 */

export function useGetProgressExportsYaml<TData = Awaited<ReturnType<typeof getProgressExportsYaml>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressExportsYaml>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressExportsYamlQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Çø„Çπ„ÇØ‰∏¶„Å≥È†ÜÂèñÂæó
 */
export const getProgressTaskOrders = (
    params: GetProgressTaskOrdersParams,
 signal?: AbortSignal
) => {
      
      
      return default<TaskOrder[]>(
      {url: `/progress/task_orders`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProgressTaskOrdersQueryKey = (params: GetProgressTaskOrdersParams,) => {
    return [`/progress/task_orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProgressTaskOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getProgressTaskOrders>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(params: GetProgressTaskOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTaskOrders>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressTaskOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressTaskOrders>>> = ({ signal }) => getProgressTaskOrders(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressTaskOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressTaskOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressTaskOrders>>>
export type GetProgressTaskOrdersQueryError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse


export function useGetProgressTaskOrders<TData = Awaited<ReturnType<typeof getProgressTaskOrders>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(
 params: GetProgressTaskOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTaskOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTaskOrders>>,
          TError,
          Awaited<ReturnType<typeof getProgressTaskOrders>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTaskOrders<TData = Awaited<ReturnType<typeof getProgressTaskOrders>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(
 params: GetProgressTaskOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTaskOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressTaskOrders>>,
          TError,
          Awaited<ReturnType<typeof getProgressTaskOrders>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressTaskOrders<TData = Awaited<ReturnType<typeof getProgressTaskOrders>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(
 params: GetProgressTaskOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTaskOrders>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çø„Çπ„ÇØ‰∏¶„Å≥È†ÜÂèñÂæó
 */

export function useGetProgressTaskOrders<TData = Awaited<ReturnType<typeof getProgressTaskOrders>>, TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse>(
 params: GetProgressTaskOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressTaskOrders>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressTaskOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Çø„Çπ„ÇØ‰∏¶„Å≥È†Ü‰øùÂ≠ò
 */
export const postProgressTaskOrders = (
    taskOrderInput: TaskOrderInput,
 signal?: AbortSignal
) => {
      
      
      return default<Message>(
      {url: `/progress/task_orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: taskOrderInput, signal
    },
      );
    }
  


export const getPostProgressTaskOrdersMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressTaskOrders>>, TError,{data: TaskOrderInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressTaskOrders>>, TError,{data: TaskOrderInput}, TContext> => {

const mutationKey = ['postProgressTaskOrders'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressTaskOrders>>, {data: TaskOrderInput}> = (props) => {
          const {data} = props ?? {};

          return  postProgressTaskOrders(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressTaskOrdersMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressTaskOrders>>>
    export type PostProgressTaskOrdersMutationBody = TaskOrderInput
    export type PostProgressTaskOrdersMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Çø„Çπ„ÇØ‰∏¶„Å≥È†Ü‰øùÂ≠ò
 */
export const usePostProgressTaskOrders = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressTaskOrders>>, TError,{data: TaskOrderInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressTaskOrders>>,
        TError,
        {data: TaskOrderInput},
        TContext
      > => {

      const mutationOptions = getPostProgressTaskOrdersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Âãï‰ΩúÁ¢∫Ë™çÁî®
 */
export const getProgressPing = (
    
 signal?: AbortSignal
) => {
      
      
      return default<Message>(
      {url: `/progress/ping`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressPingQueryKey = () => {
    return [`/progress/ping`] as const;
    }

    
export const getGetProgressPingQueryOptions = <TData = Awaited<ReturnType<typeof getProgressPing>>, TError = DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressPing>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressPingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressPing>>> = ({ signal }) => getProgressPing(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressPing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressPingQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressPing>>>
export type GetProgressPingQueryError = DefaultErrorResponse


export function useGetProgressPing<TData = Awaited<ReturnType<typeof getProgressPing>>, TError = DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressPing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressPing>>,
          TError,
          Awaited<ReturnType<typeof getProgressPing>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressPing<TData = Awaited<ReturnType<typeof getProgressPing>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressPing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressPing>>,
          TError,
          Awaited<ReturnType<typeof getProgressPing>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressPing<TData = Awaited<ReturnType<typeof getProgressPing>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressPing>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Âãï‰ΩúÁ¢∫Ë™çÁî®
 */

export function useGetProgressPing<TData = Awaited<ReturnType<typeof getProgressPing>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressPing>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressPingQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */
export const getProgressUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return default<User[]>(
      {url: `/progress/users`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressUsersQueryKey = () => {
    return [`/progress/users`] as const;
    }

    
export const getGetProgressUsersQueryOptions = <TData = Awaited<ReturnType<typeof getProgressUsers>>, TError = ErrorResponse | DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressUsers>>> = ({ signal }) => getProgressUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressUsers>>>
export type GetProgressUsersQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressUsers<TData = Awaited<ReturnType<typeof getProgressUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsers>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsers<TData = Awaited<ReturnType<typeof getProgressUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsers>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsers<TData = Awaited<ReturnType<typeof getProgressUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */

export function useGetProgressUsers<TData = Awaited<ReturnType<typeof getProgressUsers>>, TError = ErrorResponse | DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressUsersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „É¶„Éº„Ç∂„Éº‰ΩúÊàê
 */
export const postProgressUsers = (
    userInput: UserInput,
 signal?: AbortSignal
) => {
      
      
      return default<UserCreateResponse>(
      {url: `/progress/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userInput, signal
    },
      );
    }
  


export const getPostProgressUsersMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressUsers>>, TError,{data: UserInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProgressUsers>>, TError,{data: UserInput}, TContext> => {

const mutationKey = ['postProgressUsers'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProgressUsers>>, {data: UserInput}> = (props) => {
          const {data} = props ?? {};

          return  postProgressUsers(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProgressUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postProgressUsers>>>
    export type PostProgressUsersMutationBody = UserInput
    export type PostProgressUsersMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „É¶„Éº„Ç∂„Éº‰ΩúÊàê
 */
export const usePostProgressUsers = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProgressUsers>>, TError,{data: UserInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProgressUsers>>,
        TError,
        {data: UserInput},
        TContext
      > => {

      const mutationOptions = getPostProgressUsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „É¶„Éº„Ç∂„ÉºÂèñÂæó
 */
export const getProgressUsersUserId = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return default<User>(
      {url: `/progress/users/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressUsersUserIdQueryKey = (userId: number,) => {
    return [`/progress/users/${userId}`] as const;
    }

    
export const getGetProgressUsersUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressUsersUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressUsersUserId>>> = ({ signal }) => getProgressUsersUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressUsersUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressUsersUserId>>>
export type GetProgressUsersUserIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressUsersUserId<TData = Awaited<ReturnType<typeof getProgressUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsersUserId>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsersUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsersUserId<TData = Awaited<ReturnType<typeof getProgressUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsersUserId>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsersUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsersUserId<TData = Awaited<ReturnType<typeof getProgressUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „É¶„Éº„Ç∂„ÉºÂèñÂæó
 */

export function useGetProgressUsersUserId<TData = Awaited<ReturnType<typeof getProgressUsersUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressUsersUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „É¶„Éº„Ç∂„ÉºÊõ¥Êñ∞
 */
export const putProgressUsersUserId = (
    userId: number,
    userUpdate: UserUpdate,
 ) => {
      
      
      return default<User>(
      {url: `/progress/users/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      );
    }
  


export const getPutProgressUsersUserIdMutationOptions = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressUsersUserId>>, TError,{userId: number;data: UserUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProgressUsersUserId>>, TError,{userId: number;data: UserUpdate}, TContext> => {

const mutationKey = ['putProgressUsersUserId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProgressUsersUserId>>, {userId: number;data: UserUpdate}> = (props) => {
          const {userId,data} = props ?? {};

          return  putProgressUsersUserId(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProgressUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProgressUsersUserId>>>
    export type PutProgressUsersUserIdMutationBody = UserUpdate
    export type PutProgressUsersUserIdMutationError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „É¶„Éº„Ç∂„ÉºÊõ¥Êñ∞
 */
export const usePutProgressUsersUserId = <TError = ErrorResponse | UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProgressUsersUserId>>, TError,{userId: number;data: UserUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProgressUsersUserId>>,
        TError,
        {userId: number;data: UserUpdate},
        TContext
      > => {

      const mutationOptions = getPutProgressUsersUserIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „É¶„Éº„Ç∂„ÉºÂâäÈô§
 */
export const deleteProgressUsersUserId = (
    userId: number,
 ) => {
      
      
      return default<Message>(
      {url: `/progress/users/${userId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProgressUsersUserIdMutationOptions = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressUsersUserId>>, TError,{userId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProgressUsersUserId>>, TError,{userId: number}, TContext> => {

const mutationKey = ['deleteProgressUsersUserId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProgressUsersUserId>>, {userId: number}> = (props) => {
          const {userId} = props ?? {};

          return  deleteProgressUsersUserId(userId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProgressUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProgressUsersUserId>>>
    
    export type DeleteProgressUsersUserIdMutationError = ErrorResponse | DefaultErrorResponse

    /**
 * @summary „É¶„Éº„Ç∂„ÉºÂâäÈô§
 */
export const useDeleteProgressUsersUserId = <TError = ErrorResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProgressUsersUserId>>, TError,{userId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProgressUsersUserId>>,
        TError,
        {userId: number},
        TContext
      > => {

      const mutationOptions = getDeleteProgressUsersUserIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åß„É¶„Éº„Ç∂„ÉºÂèñÂæó
 */
export const getProgressUsersEmailEmail = (
    email: string,
 signal?: AbortSignal
) => {
      
      
      return default<User>(
      {url: `/progress/users/email/${email}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressUsersEmailEmailQueryKey = (email: string,) => {
    return [`/progress/users/email/${email}`] as const;
    }

    
export const getGetProgressUsersEmailEmailQueryOptions = <TData = Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError = ErrorResponse | DefaultErrorResponse>(email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressUsersEmailEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressUsersEmailEmail>>> = ({ signal }) => getProgressUsersEmailEmail(email, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressUsersEmailEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressUsersEmailEmail>>>
export type GetProgressUsersEmailEmailQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressUsersEmailEmail<TData = Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError = ErrorResponse | DefaultErrorResponse>(
 email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsersEmailEmail>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsersEmailEmail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsersEmailEmail<TData = Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError = ErrorResponse | DefaultErrorResponse>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsersEmailEmail>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsersEmailEmail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsersEmailEmail<TData = Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError = ErrorResponse | DefaultErrorResponse>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åß„É¶„Éº„Ç∂„ÉºÂèñÂæó
 */

export function useGetProgressUsersEmailEmail<TData = Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError = ErrorResponse | DefaultErrorResponse>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersEmailEmail>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressUsersEmailEmailQueryOptions(email,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary WordPress ID„Åß„É¶„Éº„Ç∂„ÉºÂèñÂæó
 */
export const getProgressUsersWpWpUserId = (
    wpUserId: number,
 signal?: AbortSignal
) => {
      
      
      return default<User>(
      {url: `/progress/users/wp/${wpUserId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressUsersWpWpUserIdQueryKey = (wpUserId: number,) => {
    return [`/progress/users/wp/${wpUserId}`] as const;
    }

    
export const getGetProgressUsersWpWpUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError = ErrorResponse | DefaultErrorResponse>(wpUserId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressUsersWpWpUserIdQueryKey(wpUserId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>> = ({ signal }) => getProgressUsersWpWpUserId(wpUserId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(wpUserId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressUsersWpWpUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>>
export type GetProgressUsersWpWpUserIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressUsersWpWpUserId<TData = Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 wpUserId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsersWpWpUserId<TData = Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 wpUserId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsersWpWpUserId<TData = Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 wpUserId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary WordPress ID„Åß„É¶„Éº„Ç∂„ÉºÂèñÂæó
 */

export function useGetProgressUsersWpWpUserId<TData = Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError = ErrorResponse | DefaultErrorResponse>(
 wpUserId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersWpWpUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressUsersWpWpUserIdQueryOptions(wpUserId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÁµÑÁπî„ÉÑ„É™„Éº„Åß„É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */
export const getProgressUsersByOrgTreeOrgId = (
    orgId: number,
 signal?: AbortSignal
) => {
      
      
      return default<User[]>(
      {url: `/progress/users/by-org-tree/${orgId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressUsersByOrgTreeOrgIdQueryKey = (orgId: number,) => {
    return [`/progress/users/by-org-tree/${orgId}`] as const;
    }

    
export const getGetProgressUsersByOrgTreeOrgIdQueryOptions = <TData = Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(orgId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressUsersByOrgTreeOrgIdQueryKey(orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>> = ({ signal }) => getProgressUsersByOrgTreeOrgId(orgId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orgId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressUsersByOrgTreeOrgIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>>
export type GetProgressUsersByOrgTreeOrgIdQueryError = ErrorResponse | DefaultErrorResponse


export function useGetProgressUsersByOrgTreeOrgId<TData = Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(
 orgId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsersByOrgTreeOrgId<TData = Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(
 orgId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>,
          TError,
          Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressUsersByOrgTreeOrgId<TData = Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(
 orgId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁµÑÁπî„ÉÑ„É™„Éº„Åß„É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */

export function useGetProgressUsersByOrgTreeOrgId<TData = Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError = ErrorResponse | DefaultErrorResponse>(
 orgId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressUsersByOrgTreeOrgId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressUsersByOrgTreeOrgIdQueryOptions(orgId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
